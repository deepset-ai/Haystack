name: Code & Documentation Updates

on:
  # Activate this workflow manually
  workflow_dispatch:
  # Activate this workflow when the PR is opened
  pull_request:
    types:
      - opened
  # Activate this workflow at every push of code changes
  push:
    paths-ignore:
      - '.github/**'
      - '**/*.md'
      - '**/*.txt'


jobs:

  code-and-docs-updates:
    runs-on: ubuntu-latest
    if: ${{ github.event_name }} != "push"

    steps:
      - run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          # repository: ${{github.event.pull_request.head.repo.full_name}}
          # ref: ${{github.event.pull_request.head.ref}}
      
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      # - name: Cache Python
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ env.pythonLocation }}
      #     key: linux-${{ env.date }}-${{ hashFiles('**/setup.py') }}-${{ hashFiles('**/setup.cfg') }}-${{ hashFiles('**/pyproject.toml') }}

      - name: Install Dependencies (on cache miss only)
        # The cache might miss during the execution of an action: there should always be a fallback step to
        # rebuild it in case it goes missing
        #if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade pip
          pip install .[test]
          pip install rest_api/
          pip install ui/
          pip install torch-scatter -f https://data.pyg.org/whl/torch-1.10.0+cpu.html
          echo "=== pip freeze ==="
          pip freeze
          
      # Apply Black on the entire codebase
      - name: Blacken
        run: black .

      # Convert the Jupyter notebooks into markdown tutorials
      - name: Generate Tutorials
        run: |
          cd docs/_src/tutorials/tutorials/
          python3 convert_ipynb.py

      # Generate markdown files from the docstrings with pydoc-markdown
      - name: Generate Docstrings
        run: |
          set -e   # Fails on any error in the following loop
          cd docs/_src/api/api/
          for file in ../pydoc/* ; do
            echo "Processing" $file
            pydoc-markdown "$file"
          done

      # Generates the OpenAPI specs file to be used on the documentation website
      - name: Generate OpenAPI Specs
        run: |
          pip install rest_api/
          cd docs/_src/api/openapi/
          python generate_openapi_specs.py

      # Generates a new JSON schema for the pipeline YAML validation
      - name: Generate JSON schema for pipelines
        run: python ./.github/utils/generate_json_schema.py
      
      # Commit the files to GitHub
      - name: Commit files
        run: |
          git remote show origin
          git status
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Update Documentation & Code Style" -a || echo "No changes to commit"
          #git push

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
