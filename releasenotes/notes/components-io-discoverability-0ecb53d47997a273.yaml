---
highlights: >
  To ease discoverability of inputs and outputs we added two new fields to all Components:
  - `inputs`
  - `outputs`
  This means those fields are now reserved and cannot be used in any `Component`.

  An example usage would look like this:
  ```python
  from haystack.components.builders.prompt_builder import PromptBuilder

  prompt_template = \"""
  Given these documents, answer the question.\nDocuments:
  {% for doc in documents %}
      {{ doc.content }}
  {% endfor %}

  \nQuestion: {{question}}
  \nAnswer:
  \"""

  prompt_builder = PromptBuilder(template=prompt_template)

  prompt_builder.inputs
  >>> PromptBuilder inputs:
  >>>   - question: Any
  >>>   - documents: Any

  prompt_builder.inputs.question
  >>> PromptBuilder.inputs.question
  ```

  The behaviour changes a bit when the `Component` has been added to a `Pipeline`. In that case we'll get
  the name of that `Component` instance as it has been added to that `Pipeline`.

  That way we can also use this fields when calling `Pipeline.connect()`.

  ```python
  from haystack.document_stores.in_memory import InMemoryDocumentStore
  from haystack.components.retrievers.in_memory import InMemoryBM25Retriever
  from haystack.components.builders.prompt_builder import PromptBuilder

  prompt_template = """
  Given these documents, answer the question.\nDocuments:
  {% for doc in documents %}
      {{ doc.content }}
  {% endfor %}

  \nQuestion: {{question}}
  \nAnswer:
  """

  retriever = InMemoryBM25Retriever(document_store=InMemoryDocumentStore())
  prompt_builder = PromptBuilder(template=prompt_template)

  pipeline = Pipeline()
  pipeline.add_component("retriever", retriever)
  pipeline.add_component("prompt_builder", prompt_builder)

  pipeline.connect(retriever.outputs.documents, prompt_builder.inputs.documents)
  ```

  This also supports autocompletion!
  By typing `prompt_builder.inputs.` you'll get the name of all the inputs. Same thing for outputs.
features:
  - |
    Ease `Component`'s I/O discoverability.
